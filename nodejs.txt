====== node.js ======

===== Express extensions + templates =====
* https://github.com/strongloop/express/wiki#template-engines

=====doorbell=====
* https://gist.github.com/companje/b3de8f5028c1dd1eb0ca

=====gpio's on Raspberry Pi with nodejs=====
<code>
var Gpio = require('onoff').Gpio;

var cols = [
  new Gpio(7, 'in', 'both'),
  new Gpio(8, 'in', 'both'),
  new Gpio(25, 'in', 'both'),
  new Gpio(24, 'in', 'both'),
  new Gpio(23, 'in', 'both')
];

var rows = [
  new Gpio(14, 'out'),
  new Gpio(15, 'out'),
  new Gpio(18, 'out')
];

setInterval(function() {
  rows[0].writeSync(0);
  rows[1].writeSync(0);
  rows[2].writeSync(0);
  var s = '';
  for (var i=0; i<5; i++) {
    s+=cols[i].readSync();
  }
  console.log(s);
},100);
</code>

=====info about semantic versions=====
http://semver.org/
  
=====olimex through serial monitor=====
  screen /dev/tty.NoZAP-PL2303-00001014 115200
  pm2 logs
  
=====pm2 log=====
  cd ~/......./.....
  DEBUG=cloud* pm2 start â€”name=cloud -o /tmp/cloud.log -e /tmp/cloud.error.log index.js

  pm2 logs cloud

=====nodejs http client example=====
<code javascript>
var http = require('http');

http.get("........", function(res) {
  console.log("Got response: " + res.statusCode);

  res.on('data', function (chunk) {
    console.log('BODY length: ' + chunk.length);
  });

  res.on('end', function (chunk) {
    console.log('end');
  });


}).on('error', function(e) {
  console.log("Got error: " + e.message);
});
</code>
=====http client using node request module=====
<code javascript>
var request = require('request');
var fs = require('fs');

request("http://10.0.0.71:8080/?action=snapshot").pipe(fs.createWriteStream('doodle.png'))
</code>

=====nodejs webcam proxy=====
* http://stackoverflow.com/questions/14035864/pipe-an-mjpeg-stream-through-a-node-js-proxy
* https://www.npmjs.org/package/mjpeg-proxy
* see [[mjpgstreamer]]

=====nodejs webcam stream with EventSource=====
https://github.com/koajs/webcam-mjpeg-stream

=====nvm=====
  curl https://raw.githubusercontent.com/creationix/nvm/v0.11.1/install.sh | bash
=> Close and reopen your terminal to start using NVM
  nvm install 0.11
  
=====socket.io-redis module=====
https://www.npmjs.org/package/socket.io-redis

=====Access-Control-Allow-Origin=====
  res.header('Access-Control-Allow-Origin', '*')
  res.status(200).send(user.toObject());
  
=====create a NodeJS client=====
<code javascript>
var io = require('socket.io-client'); 
var socket = io.connect('http://cloud.doodle3d.com:5000');
 
socket.on("error", function(data) {
  console.log("error",data);
})

socket.on("connect_error", function() {
  console.log("connect_error");
})

socket.on("connect", function() {
  console.log("connected");
})
</code>
  
=====pm2=====
https://github.com/Unitech/pm2
  npm install pm2
  node_modules/pm2/bin/pm2 start server.js
  pm2 list
  pm2 describe ...
  
=====install module from github=====
  npm install --save git+https://github.com/nkzawa/socket.io-stream.git

=====stream handbook=====
https://github.com/substack/stream-handbook

=====serve=====
<code javascript>
var express = require('express');
var app = express();
var http = require('http').Server(app);

app.use(express.static(__dirname, '/'));

http.listen(3000, function(){
  console.log('listening on *:3000');
});
</code>

=====nodejs & ajax image loading=====
dit nog lezen: http://blog.marcon.me/post/31143865164/send-images-through-websockets


<code javascript>
//server

var app = require('express')();
var http = require('http').Server(app);
var fs = require('fs');


app.get('/', function(req, res){
  res.sendFile(__dirname+'/index.html');
})
 
app.get('/image', function(req, res){
  //res.sendFile(__dirname+"/image.png");
  //return;

  fs.readFile('image.png', function(err, data) {
    res.writeHead(200, {'Content-Type': 'text/plain'});
    res.end("data:image/png;base64,"+data.toString("base64"));
  });
})

http.listen(3000, function(){
  console.log('listening on *:3000');
});

</code>

<code>
<!--client-->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>

<script>
$(document).ready(function() {
  
  $.get("/image", function(data) {
    $("#img").attr("src",data); //"data:image/jpeg;base64,"+b64;
  });

})
</script>

<img id="img">
</code>

=====binaries over socket.io (wouter)=====
* https://github.com/Doodle3D/round-trip-test/blob/master/printer/index.js
* binaryjs (arne)
* https://github.com/liamks/Delivery.js
* http://socket.io/blog/introducing-socket-io-1-0/#binary

=====send an image=====
<code javascript>
fs.readFile('test.png', function(err, data) {
  if (err) throw err; // Fail if the file can't be read.
    res.writeHead(200, {'Content-Type': 'image/png'});
    res.end(data); // Send the file data to the browser.
});
</code>

=====body-parser=====
<code javascript>
var bodyParser = require('body-parser');
//....
app.use(bodyParser.json());
//....
app.post('/stl', function(req, res){
  res.send('<h1>Hello world</h1>');
  console.log(req.body);
})
</code>

=====stljs=====
  https://github.com/cubehero/stljs/blob/master/template/povray.tmpl
needs [[povray]]  and needs a change in '''node_modules/stljs/lib/to/image.js''': remove '-s' in command.
  
  
=====debug=====
  DEBUG=socket.io* nodemon

=====webcam stream via websockets=====
* http://phoboslab.org/log/2013/09/html5-live-video-streaming-via-websockets
  
=====RPC using socket.io (with angular example)=====
* https://www.npmjs.org/package/socket.io-rpc

=====bower=====
  sudo npm install -g bower

=====webserver example with express=====
<code javascript>
var app = require('express')();
var http = require('http').Server(app);

app.get('/', function(req, res){
  //res.send('<h1>Hello world</h1>');
  res.sendfile('index.html');
})

http.listen(3000, function(){
  console.log('listening on *:3000');
});
</code>

=====socket.io example with express=====
<code javascript>
var app = require('express')();
var http = require('http').Server(app);
var io = require('socket.io')(http);

//default namespace
io.on('connection', function(socket) {
  console.log('a user connected');
  
  socket.on('disconnect', function(){
    console.log('user disconnected');
  });

  socket.on('chat message', function(msg){
    console.log(msg);
    io.emit('chat message', msg);
  });
});

///////// OTHER NAMESPACE
io.of("/printers").on('connection', function(socket) {

  socket.on('list', function(msg){
    console.log("printers.list")
    socket.emit("list",[
      {id:1, name: "test1",network:"network 1"},
      {id:2, name: "test2",network:"network 2"}
    ]);
  });

});

http.listen(3000, function(){
  console.log('listening on *:3000');
});
</code>


=====nodejs socket.io with SSL=====
* http://stackoverflow.com/questions/6599470/node-js-socket-io-with-ssl

=====websocket chat=====
* http://socket.io/get-started/chat/

=====install via package managers=====
* https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager

=====install===== 
https://github.com/joyent/node/wiki/backports.debian.org    
\
1. Install Node and NPM
2. Run the following (as root):

  sudo echo "deb http://ftp.us.debian.org/debian wheezy-backports main" >> /etc/apt/sources.list
  sudo apt-get update
  sudo apt-get install nodejs-legacy
  #curl --insecure https://www.npmjs.org/install.sh | bash
  curl --insecure https://www.npmjs.org/install.sh > install.sh
  chmod +x install.sh
  sudo ./install.sh
      
=====edit nodejs files remotely with sublimetext (and sftp package) and use nodemon for restarting node server on file change=====
note: nodemon likes to be installed globally with -g but it also works in your local folder
  npm install  nodemon
  export PATH=$PATH:`pwd`/node_modules/nodemon/bin
  nodemon.js
  
=====make nodemon only watch single file=====
  nodemon -w server.js server.js

=====nodejs socket.io with angular=====
* http://stackoverflow.com/questions/14700865/node-js-angularjs-socket-io-connect-state-and-manually-disconnect

=====socket.io with token authentication=====
* http://wlkns.co/node-js/socket-io-authentication-tutorial-server-and-client/