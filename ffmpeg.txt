====== FFMPEG ======

=====change speed=====
  ffmpeg -i input.mp4 -vf “setpts=(1/<speed>)*PTS” output.mp4

=====resize video to 480p or 720p=====
  ffmpeg -i INPUT.MOV -s hd480 OUTPUT.MOV

=====create animated GIF from sequence and specify framerate=====
  ffmpeg -r 2 -i screen-%04d.tif -y kochcurve.gif
more settings: http://superuser.com/questions/556029/how-do-i-convert-a-video-to-gif-using-ffmpeg-with-reasonable-quality/556031#556031
  
=====convert image sequence to movie=====
  ffmpeg -i output/frame%d.jpg -g 1 -y -q:v 0 -r 10  output.mp4
  
=====lossless skip first x seconds of mp3=====
  ffmpeg -ss 54 -i input.mp3 -acodec copy -y output.mp3

=====limit total number of frames (not changing framerate)=====
<code bash>ffmpeg -i input.mp4 -vcodec mpeg4 -vframes 500 -q:v 0 output.mp4
</code>

=====cut / split video=====
<code>
ffmpeg -ss 00:01:22 -i Doodle3D.m4v -q 0 -vcodec copy -acodec copy -y tmp.mov
</code>
<code>
ffmpeg -ss 00:01:14 -t 00:00:31 -i Doodle3D-kickstarter-movie.mp4 -q 0 -vcodec copy -acodec copy -y tmp2.mp4
</code>

=====offset & seek=====
offset video (0.5 sec) & seek/skip to position in audio (0.3 sec):
<code bash>
ffmpeg -itsoffset 0.3 -i video-input.mp4 -ss 0.5 -i audio-input.mp3 -vcodec copy -acodec copy -y output.mov
</code>

=====fix aspect ratio=====
<code>..... -s 900x720 -aspect 16:9 </code>

=====-sameq vs -qscale=====
* for video
<code>-q:v 0</code>
* for audio
<code>-q:a 0</code>

=====add audio / soundtrack to movie=====
<code>ffmpeg -i IMG_7966.MOV -i sound.mp3 -vcodec copy -acodec copy output.mov </code>

=====wellicht interessant=====
* http://rodrigopolo.com/ffmpeg/cheats.html
* http://www.warpwood.com/wiki/ffmpeg/#index9h2
* http://superuser.com/questions/347433/how-to-create-an-uncompressed-avi-from-a-series-of-1000s-of-png-images-using-ff

=====rawvideo / uncompressed avi=====
<code winbatch>
ffmpeg -i air_traffic_2048.mp4 -sameq -r 15 -vcodec rawvideo -y new.avi
</code>

=====more uncompressed info=====
* http://superuser.com/questions/347433/how-to-create-an-uncompressed-avi-from-a-series-of-1000s-of-png-images-using-ff
<code winbatch>
ffmpeg -i one-hand-with-sleeve.mpg -sameq -g 1 -f mov -vcodec qtrle -pix_fmt rgb24 output.mov
</code>

*http://ffmpeg-users.933282.n4.nabble.com/Outputting-uncompressed-8-bit-4-2-2-MOV-td3264815.html
<code winbatch>
ffmpeg -i input.mov -vcodec rawvideo -pix_fmt uyvy422 -vtag 2vuy  uncompressed.mov 
</code>
=====combine jpg's with existing mjpeg movie (on Windows)=====
<code winbatch>
@echo off
cd /d %0\..

if exist clouds-queue\*.jpg (
  cat clouds-queue/*.jpg | ffmpeg -f image2pipe -vcodec mjpeg -i - -sameq -s 2048x1024 -f mjpeg -vcodec mjpeg -y new-clouds.mov
  ffmpeg -f mjpeg -i concat:"clouds2048.mov|new-clouds.mov" -c copy -y combined.mov
)

if exist combined.mov (
  del clouds2048.mov
  del new-clouds.mov
  move combined.mov clouds2048.mov
  move clouds-queue\*.jpg clouds-done\
)
</code>

=====in case of segmentation faults you might need to add -vcoded=====
<code bash>
ffmpeg -i Globe4D-energy-related-content.mov -sameq -s 512x256 -vcodec mpeg4 Globe4D-energy-related-content-512.mov
</code>

=====combine multiple movies with ffmpeg=====
<code bash>
#!/bin/bash
ffmpeg -f mjpeg -i <\
(  ffmpeg -v 0 -i 07h.mov -f image2pipe -vcodec copy -y /dev/stdout;
  ffmpeg -v 0 -i 08h.mov -f image2pipe -vcodec copy -y /dev/stdout;
  ffmpeg -v 0 -i 09h.mov -f image2pipe -vcodec copy -y /dev/stdout;
  ...
) -vcodec copy -an -y total.mov
stty echo
</code>
=====add non-sequence images to movie with cat and ffmpeg=====
<code bash>
cat 2012050412*.jpg | ffmpeg -v 0 -f image2pipe -vcodec mjpeg -i  - -sameq -vcodec mjpeg -y 12h.mov
</code>

=====add new frames / image files to an existing mjpeg movie with ffmpeg=====
<code bash>
#!/bin/bash
ffmpeg -f mjpeg -i <\
(  ffmpeg -v 0 -i clouds.mov -f image2pipe -vcodec copy -y /dev/stdout;
  cat clouds-queue/*.jpg | ffmpeg -v 0 -f image2pipe -vcodec mjpeg -i  - -sameq -vcodec mjpeg -f mjpeg -y -s 1024x512 /dev/stdout;
) -vcodec copy -an -y tmp.mov

rm clouds.mov
mv tmp.mov clouds.mov
mv clouds-queue/*.jpg clouds-done/
</code>

=====losse plaatjes omzetten naar filmpje met framerate en veel keyframes=====
<code bash>
ffmpeg -f image2 -r 1 -i frame-%04d.png -r 5 -g 1 -y -sameq -s 1024x512 output.mov
</code>

=====output framerate 10, keyframe on everyframe=====
<code bash>ffmpeg -i ring.mov -r 10 -g 1 -sameq -y ring-10.mov</code>

=====-r 1 sets input framerate to 1=====
<code bash>ffmpeg -r 1 -i image-%d.PNG -sameq -g 1 -y  A2-vegetation.mov</code>

=====convert movie to iPad=====
<code bash>ffmpeg -i input.mov -acodec libfaac -ac 2 -ab 160k -s 1024x768 -vcodec libx264 -vpre slow -vpre ipod640 -b 1200k -f mp4 -threads 10 output.mp4</code>

=====convert image sequence to movie=====
<code bash>ffmpeg -f image2 -i frame%03d.png -s 1024x512 output.mov</code>

=====convert movie from canon ixus to mpeg=====
<code bash>ffmpeg -i MVI_0131.AVI -r 25 -sameq output.mov</code>

=====rotate movie (with memcoder)=====
<code bash>mencoder -vf rotate=1 -o OUTPUT.AVI -oac copy -ovc lavc MVI_7590.AVI </code>

=====Remove audio from a movie=====
<code bash>ffmpeg -i input.mov -an output.mov</code>

=====Combine jpg and mp3 audio to mpg=====
(in this case portrait). Be sure to use RGB jpg's instead of CMYK.
<code bash>ffmpeg -y -i vogels.jpg -loop_input -i vogels.mp3 -s 320x480 vogels320x480.mpg
or:
ffmpeg -y -b 2500k -r 30 -i yellow-brick-road.jpg -i brand-new-day.mp3 -map 0:0 -map 1:0 -vsync 1 -sameq  -vcodec mpeg4 -s 320x480 result2.mp4</code>

=====crop away black side bars=====
<code bash>
ffmpeg -i in.mov -sameq -cropleft 104 -cropright 104 hands.mov
</code>

=====set start / offset time of input movie=====
-itsoffset needs to go before -i filename
<code bash>
ffmpeg -itsoffset 10 -i IMG_4699.MOV -s 640x360 -an -sameq hebbenEnHouden.mov
</code>

=====timelapse with ffmpeg / gstreamer=====
* see http://www.oz9aec.net/index.php/gstreamer/346-simple-time-lapse-video-with-gtreamer-and-ffmpeg